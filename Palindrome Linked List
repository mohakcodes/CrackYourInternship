class Solution {
public:
    bool isPalindrome(ListNode* head)
    {
        string s="";
        while(head)
        {
            s += head->val;
            head = head->next;
        }
        int i=0;
        int j=s.size()-1;
        while(i<j)
        {
            if(s[i] != s[j]) return false;
            i++; j--;
        }
        return true;
    }
};

// optimal

class Solution {
public:
    bool isPalindrome(ListNode* head)
    {
        ListNode* slow = head;
        ListNode* fast = head;
        ListNode* prev = NULL;
        ListNode* temp;
        
        while(fast && fast->next)
        {
            fast = fast->next->next;
            temp = slow->next;
            slow->next = prev;
            prev = slow;
            slow = temp;
        }
        slow = fast ? slow->next : slow;
        
        while(prev)
        {
            if(slow->val != prev->val) return false;
            else
            {
                slow = slow->next;
                prev = prev->next;
            }
        }
        return true;
    }
};
